// lib/presentation/screens/profile/updated_inputdata.dart
import 'package:flutter/material.dart';
import 'package:myproject2/data/services/auth_service.dart';
import 'package:myproject2/presentation/screens/face/realtime_face_detection_screen.dart';
import 'package:myproject2/presentation/screens/profile/updated_profile.dart';
import 'package:myproject2/presentation/screens/profile/profileteachaer.dart';

class UpdatedInputDataPage extends StatefulWidget {
  const UpdatedInputDataPage({super.key});

  @override
  State<UpdatedInputDataPage> createState() => _UpdatedInputDataPageState();
}

class _UpdatedInputDataPageState extends State<UpdatedInputDataPage> {
  final _formKey = GlobalKey<FormState>();
  final _authService = AuthService();
  final _fullNameController = TextEditingController();
  final _schoolIdController = TextEditingController();
  bool _isLoading = false;
  bool _isFaceProcessing = false;
  String _selectedRole = 'student';

  @override
  void dispose() {
    _fullNameController.dispose();
    _schoolIdController.dispose();
    super.dispose();
  }

  String? _validateFullName(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter your full name';
    }
    if (value.length < 2) {
      return 'Name must be at least 2 characters long';
    }
    return null;
  }

  String? _validateSchoolId(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter your school ID';
    }
    if (value.length < 5) {
      return 'School ID must be at least 5 characters';
    }
    return null;
  }

  Future<void> _saveUserProfile() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    if (!mounted) return;
    setState(() => _isLoading = true);

    try {
      print('‚úÖ User profile saved successfully');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      final savedProfile = await _authService.getUserProfile();
      if (savedProfile == null) {
        throw Exception('Failed to save user profile');
      }

      print('üìã Saved profile: $savedProfile');

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Face Recognition
      if (_selectedRole == 'student') {
        print('üë®‚Äçüéì User is student, setting up Face Recognition...');
        
        if (!mounted) return;
        
        await _handleStudentFaceSetup();
      }

      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
      if (mounted) {
        _navigateToProfilePage();
      }
    } catch (e) {
      print('‚ùå Error in _saveUserProfile: $e');
      if (mounted) {
        _showErrorDialog(
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${e.toString()}',
          showRetry: true,
          onRetry: _saveUserProfile,
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _handleStudentFaceSetup() async {
    if (!mounted) return;
    
    final hasFace = await _authService.hasFaceEmbedding();
    if (hasFace) {
      print('‚úÖ Face data already exists');
      return;
    }

    print('üì∏ No face data found, starting Face Recognition setup...');
    
    // ‡πÅ‡∏™‡∏î‡∏á dialog ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    final shouldSetup = await _showFaceSetupIntroDialog();
    if (!shouldSetup) return;
    
    bool faceProcessed = false;
    int attempts = 0;
    const maxAttempts = 3;

    while (!faceProcessed && attempts < maxAttempts && mounted) {
      attempts++;
      print('üîÑ Face setup attempt $attempts/$maxAttempts');
      
      try {
        await _processRealtimeFaceSetup();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        faceProcessed = await _authService.hasFaceEmbedding();

        if (!faceProcessed && mounted) {
          final shouldRetry = await _showRetryDialog(
            '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå',
            '‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
            attempts < maxAttempts,
          );
          
          if (!shouldRetry) break;
        }
      } catch (e) {
        print('‚ùå Error in face setup attempt $attempts: $e');
        if (mounted) {
          final shouldRetry = await _showRetryDialog(
            '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            e.toString(),
            attempts < maxAttempts,
          );
          
          if (!shouldRetry) break;
        }
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    final finalCheck = await _authService.hasFaceEmbedding();
    if (!finalCheck && mounted) {
      _showErrorDialog(
        '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° $attempts ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå',
        showRetry: false,
      );
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    }
  }

  Future<bool> _showFaceSetupIntroDialog() async {
    return await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.face_retouching_natural, color: Colors.blue, size: 28),
            SizedBox(width: 12),
            Text('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Face Recognition'),
          ],
        ),
        content: const SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Face Recognition ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà!',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.blue,
                ),
              ),
              SizedBox(height: 12),
              Text(
                '‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö Real-time ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÄ‡∏≠‡∏á',
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              SizedBox(height: 12),
              Text('‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà:'),
              SizedBox(height: 8),
              Row(
                children: [
                  Icon(Icons.camera_alt, size: 16, color: Colors.green),
                  SizedBox(width: 8),
                  Expanded(child: Text('‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö')),
                ],
              ),
              SizedBox(height: 4),
              Row(
                children: [
                  Icon(Icons.auto_awesome, size: 16, color: Colors.green),
                  SizedBox(width: 8),
                  Expanded(child: Text('‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥')),
                ],
              ),
              SizedBox(height: 4),
              Row(
                children: [
                  Icon(Icons.timer, size: 16, color: Colors.green),
                  SizedBox(width: 8),
                  Expanded(child: Text('‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')),
                ],
              ),
              SizedBox(height: 4),
              Row(
                children: [
                  Icon(Icons.security, size: 16, color: Colors.green),
                  SizedBox(width: 8),
                  Expanded(child: Text('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô')),
                ],
              ),
              SizedBox(height: 12),
              const Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange.shade50,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange.shade200),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.lightbulb, color: Colors.orange, size: 18),
                        SizedBox(width: 8),
                        Text(
                          '‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.orange,
                          ),
                        ),
                      ],
                    ),
                    SizedBox(height: 4),
                    Text(
                      '‚Ä¢ ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πâ‡∏≠‡∏á\n'
                      '‚Ä¢ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠\n'
                      '‚Ä¢ ‡πÑ‡∏°‡πà‡∏™‡∏ß‡∏°‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å',
                      style: TextStyle(fontSize: 13),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô'),
          ),
          ElevatedButton.icon(
            onPressed: () => Navigator.of(context).pop(true),
            icon: const Icon(Icons.face_retouching_natural),
            label: const Text('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue.shade400,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
    ) ?? false;
  }

  Future<void> _processRealtimeFaceSetup() async {
    if (!mounted) return;
    
    setState(() => _isFaceProcessing = true);
    
    try {
      print('üì± Opening real-time face registration...');
      
      final result = await Navigator.push<bool>(
        context,
        MaterialPageRoute(
          builder: (context) => RealtimeFaceDetectionScreen(
            isRegistration: true,
            instructionText: "‡∏ß‡∏≤‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß\n‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
            onFaceEmbeddingCaptured: (embedding) {
              print('‚úÖ Face embedding captured successfully');
            },
          ),
        ),
      );

      if (!mounted) return;

      if (result == true) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.white),
                  SizedBox(width: 12),
                  Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'),
                ],
              ),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 3),
            ),
          );
        }
      } else {
        throw Exception('‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
      }

    } catch (e) {
      print('‚ùå Error in real-time face setup: $e');
      
      String errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.toString()}';
      
      if (e.toString().contains('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤')) {
        errorMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πâ‡∏≠‡∏á';
      } else if (e.toString().contains('‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢')) {
        errorMessage = '‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö';
      } else if (e.toString().contains('‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')) {
        errorMessage = '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Face Recognition ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
      }
      
      throw Exception(errorMessage);
    } finally {
      if (mounted) {
        setState(() => _isFaceProcessing = false);
      }
    }
  }

  Future<bool> _showRetryDialog(String title, String message, bool canRetry) async {
    if (!mounted) return false;
    
    return await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Text(title),
        content: Text(message),
        actions: [
          if (canRetry)
            TextButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: const Text('‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'),
            ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text(canRetry ? '‡∏Ç‡πâ‡∏≤‡∏°' : '‡∏õ‡∏¥‡∏î'),
          ),
        ],
      ),
    ) ?? false;
  }

  void _showErrorDialog(String message, {bool showRetry = false, VoidCallback? onRetry}) {
    if (!mounted) return;
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'),
        content: Text(message),
        actions: [
          if (showRetry && onRetry != null)
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                onRetry();
              },
              child: const Text('‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'),
            ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('‡∏õ‡∏¥‡∏î'),
          ),
        ],
      ),
    );
  }

  void _navigateToProfilePage() {
    if (!mounted) return;
    
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => _selectedRole == 'teacher'
            ? const TeacherProfile()
            : const UpdatedProfile(),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'User Information',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        centerTitle: true,
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: Form(
              key: _formKey,
              child: Column(
                children: [
                  const SizedBox(height: 20),
                  Container(
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      color: Colors.purple.shade50,
                      shape: BoxShape.circle,
                    ),
                    child: Icon(
                      _selectedRole == 'teacher'
                          ? Icons.school
                          : Icons.person_outline,
                      size: 100,
                      color: Colors.purple.shade400,
                    ),
                  ),
                  const SizedBox(height: 40),
                  Text(
                    'Welcome!',
                    style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: Colors.purple.shade700,
                        ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Please complete your profile',
                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                          color: Colors.grey.shade600,
                        ),
                  ),
                  const SizedBox(height: 32),

                  // Role Selection
                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade50,
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.grey.shade300),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Select your role',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.grey.shade700,
                          ),
                        ),
                        const SizedBox(height: 12),
                        Row(
                          children: [
                            _buildRoleOption(
                                'student', 'Student', Icons.person),
                            const SizedBox(width: 12),
                            _buildRoleOption(
                                'teacher', 'Teacher', Icons.school),
                          ],
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 24),

                  TextFormField(
                    controller: _fullNameController,
                    decoration: InputDecoration(
                      labelText: 'Full Name',
                      hintText: 'Enter your full name',
                      prefixIcon: const Icon(Icons.person),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      filled: true,
                      fillColor: Colors.grey.shade50,
                    ),
                    validator: _validateFullName,
                    textCapitalization: TextCapitalization.words,
                    enabled: !_isLoading && !_isFaceProcessing,
                  ),
                  const SizedBox(height: 20),
                  TextFormField(
                    controller: _schoolIdController,
                    decoration: InputDecoration(
                      labelText: 'School ID',
                      hintText: 'Enter your school ID',
                      prefixIcon: const Icon(Icons.numbers),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      filled: true,
                      fillColor: Colors.grey.shade50,
                    ),
                    validator: _validateSchoolId,
                    enabled: !_isLoading && !_isFaceProcessing,
                  ),
                  const SizedBox(height: 40),

                  // Face Recognition Information Card for Students
                  if (_selectedRole == 'student')
                    Container(
                      margin: const EdgeInsets.only(bottom: 20),
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.blue.shade50,
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.blue.shade200),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              Icon(
                                Icons.face_retouching_natural,
                                color: Colors.blue.shade700,
                                size: 24,
                              ),
                              const SizedBox(width: 12),
                              Text(
                                'Face Recognition Setup',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.blue.shade700,
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 12),
                          const Text(
                            '‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà! ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ Real-time Face Detection ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÄ‡∏≠‡∏á',
                            style: TextStyle(
                              fontSize: 14,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                          const SizedBox(height: 8),
                          const Text(
                            '‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö\n'
                            '‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n'
                            '‚Ä¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ',
                            style: TextStyle(fontSize: 13),
                          ),
                        ],
                      ),
                    ),

                  // Loading indicator for face processing
                  if (_isFaceProcessing)
                    Container(
                      padding: const EdgeInsets.all(16),
                      margin: const EdgeInsets.only(bottom: 20),
                      decoration: BoxDecoration(
                        color: Colors.blue.shade50,
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.blue.shade200),
                      ),
                      child: Row(
                        children: [
                          const SizedBox(
                            width: 20,
                            height: 20,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤...',
                              style: TextStyle(
                                color: Colors.blue.shade700,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),

                  SizedBox(
                    width: double.infinity,
                    height: 50,
                    child: ElevatedButton(
                      onPressed: (_isLoading || _isFaceProcessing) ? null : _saveUserProfile,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.purple.shade400,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        elevation: 2,
                      ),
                      child: _isLoading
                          ? const SizedBox(
                              height: 20,
                              width: 20,
                              child: CircularProgressIndicator(
                                strokeWidth: 2,
                                valueColor:
                                    AlwaysStoppedAnimation<Color>(Colors.white),
                              ),
                            )
                          : Text(
                              _selectedRole == 'student' 
                                  ? 'Save Profile & Setup Face Recognition'
                                  : 'Save Profile',
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                    ),
                  ),
                  
                  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                  const SizedBox(height: 32),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildRoleOption(String role, String label, IconData icon) {
    final isSelected = _selectedRole == role;
    return Expanded(
      child: InkWell(
        onTap: (_isLoading || _isFaceProcessing) ? null : () => setState(() => _selectedRole = role),
        child: Container(
          padding: const EdgeInsets.symmetric(vertical: 16),
          decoration: BoxDecoration(
            color: isSelected ? Colors.purple.shade50 : Colors.white,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: isSelected ? Colors.purple.shade400 : Colors.grey.shade300,
              width: isSelected ? 2 : 1,
            ),
          ),
          child: Column(
            children: [
              Icon(
                icon,
                color:
                    isSelected ? Colors.purple.shade400 : Colors.grey.shade600,
                size: 32,
              ),
              const SizedBox(height: 8),
              Text(
                label,
                style: TextStyle(
                  color: isSelected
                      ? Colors.purple.shade700
                      : Colors.grey.shade700,
                  fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
}class UpdatedInputDataPage extends StatefulWidget {
  // ... constructor ‡πÅ‡∏•‡∏∞ state
}

class _UpdatedInputDataPageState extends State<UpdatedInputDataPage> {
  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πà‡∏≤‡∏á ‡πÜ
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô validation
  String? _validateFullName(String? value) { ... }
  String? _validateSchoolId(String? value) { ... }
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
  Future<void> _saveUserProfile() async {
    // ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡πá‡∏ô ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‚¨áÔ∏è
    print('üîÑ Saving user profile...');
    await _authService.saveUserProfile(...);
    print('‚úÖ User profile saved successfully'); // ‚úÖ ‡∏°‡∏µ‡∏ï‡πà‡∏≠
    // ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å
  }
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...
  Future<void> _handleStudentFaceSetup() { ... }
  Future<bool> _showFaceSetupIntroDialog() { ... }
  Future<void> _processRealtimeFaceSetup() { ... }
  // ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å‡πÄ‡∏¢‡∏≠‡∏∞
  
  @override
  Widget build(BuildContext context) { ... } // ‚úÖ ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
  
  Widget _buildRoleOption(...) { ... } // ‚úÖ ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
} // ‚úÖ ‡∏õ‡∏¥‡∏î class ‡πÅ‡∏•‡πâ‡∏ß
